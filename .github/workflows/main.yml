name: LottoChecker CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    name: Build & Package
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ github.event_name }}
      - uses: actions/checkout@v2

      #
      # Build and package backend
      #
      - name: Build backend
        working-directory: backend
        run: sam build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-to-assume: ${{ secrets.PIPELINE_EXECUTION_ROLE }}
          # role-session-name: dev-deployment
          # role-duration-seconds: 3600
          # role-skip-session-tagging: true

      - name: Package backend artifact
        working-directory: backend
        run: |
          sam package \
              --s3-bucket ${{ secrets.ARTIFACT_BUCKET }} \
              --output-template-file backend-template.packaged.yaml

      - name: Upload backend artifact
        uses: actions/upload-artifact@v2
        with:
          name: backend-artifact
          path: backend/backend-template.packaged.yaml
          if-no-files-found: error

      #
      # Build and package frontend
      #
      - name: Build frontend infra
        working-directory: frontend
        run: sam build

      - name: Package frontend infra artifact
        working-directory: frontend
        run: |
          sam package \
              --s3-bucket ${{ secrets.ARTIFACT_BUCKET }} \
              --output-template-file frontend-template.packaged.yaml

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v2
        with:
          name: frontend-infra-artifact
          path: frontend/frontend-template.packaged.yaml
          if-no-files-found: error

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # - name: Install frontend dependencies
      #   working-directory: frontend
      #   run: npm install

      - name: Lint frontend
        working-directory: frontend
        run: |
          npm install @vue/cli-service
          npm run lint

      # - name: Build frontend
      #   working-directory: frontend
      #   run: npm run build:frontend

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v2
        with:
          name: frontend-website-artifact
          # path: frontend/dist/
          path: |
            frontend/
            !frontend/node_modules/
          if-no-files-found: error

  deploy-dev:
    if: github.ref == 'refs/heads/main' # || github.event_name == 'workflow_dispatch'
    name: Deploy to Dev
    needs: build
    environment: dev
    env:
      STACK_NAME: lottochecker-dev
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          # role-session-name: testing-deployment
          # role-duration-seconds: 3600
          # role-skip-session-tagging: true

      - uses: ./.github/actions/deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        with:
          stack-name-suffix: ${{ env.STACK_NAME_SUFFIX }}
          artifact-bucket: ${{ secrets.ARTIFACT_BUCKET }}
          admin-email: ${{ secrets.ADMIN_EMAIL }}

  deploy-feature:
    # this stage is triggered only for feature branches (feature*),
    # which will build the stack and deploy to a stack named with branch name.
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [build]
    runs-on: ubuntu-latest
    name: Deploy to Feature
    environment: dev
    steps:
      - uses: actions/checkout@v2

      - name: Set STACK_NAME_SUFFIX
        run: echo STACK_NAME_SUFFIX=$(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: ./.github/actions/deploy
        # env:
        #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #   AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        with:
          stack-name-suffix: ${{ env.STACK_NAME_SUFFIX }}
          artifact-bucket: ${{ secrets.ARTIFACT_BUCKET }}
          admin-email: ${{ secrets.ADMIN_EMAIL }}

  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    needs: deploy-feature
    runs-on: ubuntu-latest
    name: Delete Feature
    steps:
      - uses: actions/checkout@v2

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          # role-session-name: feature-deployment
          # role-duration-seconds: 3600
          # role-skip-session-tagging: true

      - name: Delete feature branch stack
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        working-directory: backend
        run: |
          sam delete \
              --stack-name lottochecker-$(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
              --no-prompts
          sam delete \
              --stack-name lottochecker-fe-$(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
              --no-prompts
