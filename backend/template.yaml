AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  lotto-checker
Parameters:
  AppHostUrl:
    Type: String
    Description: URL where app will be hosted. To be added as a CORS allowed origin.
  AdminEmail:
    Type: String
    Description: Email ID for the initial admin user.

Globals:
  Function:
    Timeout: 3

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: LottoChecker API
      CorsConfiguration:
        AllowMethods:
          - GET
        AllowHeaders:
          - "*"
        AllowOrigins:
          - "*"
      Auth:
        Authorizers:
          OAuth2Authorizer:
            AuthorizationScopes:
              - email
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref UserPoolWebClient
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: OAuth2Authorizer

  LottoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lotto/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          APP_HOST_URL: !Ref AppHostUrl
      Events:
        Default:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /lotto/WinningNumbers
            Method: GET
        GetWinningNumbers:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /lotto/WinningNumbers/{state}/{game}
            Method: GET

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AWS::StackName}-frontend
      GenerateSecret: false
      CallbackURLs:
        - !Ref AppHostUrl
        - http://localhost:8080
      LogoutURLs:
        - !Ref AppHostUrl
        - http://localhost:8080
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref AWS::StackName
      UserPoolId: !Ref UserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref UserPool
      Username: !Ref AdminEmail
      DesiredDeliveryMediums:
        - EMAIL
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmail

  TicketsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Tickets 
      KeySchema:
        - AttributeName: UserId # user@example.com
          KeyType: HASH
        - AttributeName: DateRange # 2022-01-01#2022-01-30
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: DateRange
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

Outputs:
  # Find out more about other implicit resources you can reference within SAM
  HttpApi:
    Description: API Gateway endpoint URL for Lotto function.
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/lotto/WinningNumbers
  CognitoRegion:
    Value: !Ref AWS::Region
  UserPoolId:
    Value: !Ref UserPool
  UserPoolWebClientId:
    Value: !Ref UserPoolWebClient
  UserPoolAuthDomain:
    Value: !Sub ${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
